R2       = unname(res$R2[1]),
p_value  = unname(res$`Pr(>F)`[1])
)
}
for (v in vars_exist) {
# pega só Sample.id e a variável
df <- metadados_grupos_saude_binario_[, c("Sample.id", v), drop = FALSE]
df <- df[!is.na(df[[v]]), , drop = FALSE]
# IDs em comum entre a variável e a matriz de distância
ids_ok <- intersect(df$Sample.id, labels(dist_mat))
if (length(ids_ok) < 3) next
# reordena df pela ordem que vamos usar
df <- df[match(ids_ok, df$Sample.id), , drop = FALSE]
# cria submatriz da distância na MESMA ordem de df
M <- as.matrix(dist_mat)[ids_ok, ids_ok]
d_sub <- as.dist(M)
attr(d_sub, "Labels") <- ids_ok
# fatoriza se for texto e pula sem variação
if (is.character(df[[v]])) df[[v]] <- factor(df[[v]])
if (length(unique(df[[v]])) < 2) next
# PERMANOVA
res <- adonis2(d_sub ~ df[[v]], permutations = 999)
result_list_unwei[[v]] <- data.frame(
Variable = v,
F_value  = unname(res$F[1]),
R2       = unname(res$R2[1]),
p_value  = unname(res$`Pr(>F)`[1])
)
}
permanova_results_unwei <- bind_rows(result_list_unwei) %>% arrange(p_value)
print(permanova_results_unwei)
#Filtrar apenas os significativos (p < 0.05)
permanova_sig_unwei <- permanova_results_unwei[permanova_results_unwei$p_value < 0.05, ]
print(permanova_sig_unwei)
#######============ Permanova Weighted =================#
library(vegan)
vars <- c("Region", "IL17A", "IFNGamma", "TNF", "IL10", "IL6", "IL4", "IL2", "Age", "Sex", "Race",
"Systolic", "Diastolic", "BMI", "Waist_Hip_Ratio",
"HbA1c", "Cholesterol", "LDL", "HDL", "VLDL", "Triglycerides",
"TGO", "TGP", "GGT", "Glucose", "Insulin", "CRP", "Health_Status", "Health_Status_Medicine"
)
# Escolha a distância
dist_mat_wei <- weighted_unifrac   # troque para unweighted_unifrac.limpo se quiser
# Garante que as variáveis existem no metadata
vars_exist <- intersect(vars, names(metadados_grupos_saude_binario_))
missing <- setdiff(vars, vars_exist)
if (length(missing)) message("Colunas inexistentes no metadata: ", paste(missing, collapse=", "))
set.seed(123)
result_list_wei <- list()
for (v in vars_exist) {
# pega só Sample.id e a variável
df <- metadados_grupos_saude_binario_[, c("Sample.id", v), drop = FALSE]
df <- df[!is.na(df[[v]]), , drop = FALSE]
# IDs em comum entre a variável e a matriz de distância
ids_ok <- intersect(df$Sample.id, labels(dist_mat_wei))
if (length(ids_ok) < 3) next
# reordena df pela ordem que vamos usar
df <- df[match(ids_ok, df$Sample.id), , drop = FALSE]
# cria submatriz da distância na MESMA ordem de df
M <- as.matrix(dist_mat_wei)[ids_ok, ids_ok]
d_sub <- as.dist(M)
attr(d_sub, "Labels") <- ids_ok
# fatoriza se for texto e pula sem variação
if (is.character(df[[v]])) df[[v]] <- factor(df[[v]])
if (length(unique(df[[v]])) < 2) next
# PERMANOVA
res <- adonis2(d_sub ~ df[[v]], permutations = 999)
result_list[[v]] <- data.frame(
Variable = v,
F_value  = unname(res$F[1]),
R2       = unname(res$R2[1]),
p_value  = unname(res$`Pr(>F)`[1])
)
}
result_list_wei <- list()
for (v in vars_exist) {
# pega só Sample.id e a variável
df <- metadados_grupos_saude_binario_[, c("Sample.id", v), drop = FALSE]
df <- df[!is.na(df[[v]]), , drop = FALSE]
# IDs em comum entre a variável e a matriz de distância
ids_ok <- intersect(df$Sample.id, labels(dist_mat_wei))
if (length(ids_ok) < 3) next
# reordena df pela ordem que vamos usar
df <- df[match(ids_ok, df$Sample.id), , drop = FALSE]
# cria submatriz da distância na MESMA ordem de df
M <- as.matrix(dist_mat_wei)[ids_ok, ids_ok]
d_sub <- as.dist(M)
attr(d_sub, "Labels") <- ids_ok
# fatoriza se for texto e pula sem variação
if (is.character(df[[v]])) df[[v]] <- factor(df[[v]])
if (length(unique(df[[v]])) < 2) next
# PERMANOVA
res <- adonis2(d_sub ~ df[[v]], permutations = 999)
result_list_wei[[v]] <- data.frame(
Variable = v,
F_value  = unname(res$F[1]),
R2       = unname(res$R2[1]),
p_value  = unname(res$`Pr(>F)`[1])
)
}
for (v in vars_exist) {
# pega só Sample.id e a variável
df <- metadados_grupos_saude_binario_[, c("Sample.id", v), drop = FALSE]
df <- df[!is.na(df[[v]]), , drop = FALSE]
# IDs em comum entre a variável e a matriz de distância
ids_ok <- intersect(df$Sample.id, labels(dist_mat_wei))
if (length(ids_ok) < 3) next
# reordena df pela ordem que vamos usar
df <- df[match(ids_ok, df$Sample.id), , drop = FALSE]
# cria submatriz da distância na MESMA ordem de df
M <- as.matrix(dist_mat_wei)[ids_ok, ids_ok]
d_sub <- as.dist(M)
attr(d_sub, "Labels") <- ids_ok
# fatoriza se for texto e pula sem variação
if (is.character(df[[v]])) df[[v]] <- factor(df[[v]])
if (length(unique(df[[v]])) < 2) next
# PERMANOVA
res <- adonis2(d_sub ~ df[[v]], permutations = 999)
result_list_wei[[v]] <- data.frame(
Variable = v,
F_value  = unname(res$F[1]),
R2       = unname(res$R2[1]),
p_value  = unname(res$`Pr(>F)`[1])
)
}
permanova_results_wei <- bind_rows(result_list_wei) %>% arrange(p_value)
print(permanova_results_wei)
#Filtrar apenas os significativos (p < 0.05)
permanova_sig_wei <- permanova_results_wei[permanova_results_wei$p_value < 0.05, ]
print(permanova_sig_wei)
#Ordenar por p-valor
permanova_sorted_wei <- permanova_results_wei[order(permanova_results_wei$p_value), ]
head(permanova_sorted_wei, 10)  # top 10
ggplot(permanova_sig_wei, aes(x = reorder(Variable, -R2), y = R2)) +
geom_col(fill = "steelblue") +
coord_flip() +
theme_minimal() +
labs(
title = "PERMANOVA WEIGHTED – R² of significant variables",
x = "Variable",
y = expression(R^2)
)
ggsave("C:/Users/polia/OneDrive/Desktop/EstatisticaR/AgrUrbana/16S_AgriUrbana/Planilhas_UrbanAgri/Para_Dissertação/permanova_significant_variables_wei.png",
width = 20, height = 15, units = "cm", dpi = 300)
ggplot(permanova_sig_wei, aes(x = reorder(Variable, -R2), y = R2)) +
geom_col(fill = "steelblue") +
coord_flip() +
theme_minimal() +
labs(
title = "PERMANOVA WEIGHTED – R² of significant variables",
x = "Variable",
y = expression(R^2)
)
ggplot(permanova_sig_wei, aes(x = reorder(Variable, -R2), y = R2)) +
geom_col(fill = "steelblue") +
coord_flip() +
theme_minimal() +
labs(
title = "PERMANOVA WEIGHTED – R² of significant variables",
x = "Variable",
y = expression(R^2)
)
ggsave("C:/Users/polia/OneDrive/Desktop/EstatisticaR/AgrUrbana/16S_AgriUrbana/Planilhas_UrbanAgri/Para_Dissertação/permanova_significant_variables_wei.png",
width = 20, height = 15, units = "cm", dpi = 300)
ggplot(permanova_sig_wei, aes(x = reorder(Variable, -R2), y = R2)) +
geom_col(fill = "steelblue") +
coord_flip() +
theme_minimal() +
labs(
title = "PERMANOVA WEIGHTED – R² of significant variables",
x = "Variable",
y = expression(R^2)
)
# Escolha a distância
dist_mat_unwei <- unweighted_unifrac   # troque para ununweighted_unifrac.limpo se quiser
# Garante que as variáveis existem no metadata
vars_exist <- intersect(vars, names(metadados_grupos_saude_binario_))
missing <- setdiff(vars, vars_exist)
if (length(missing)) message("Colunas inexistentes no metadata: ", paste(missing, collapse=", "))
set.seed(123)
result_list_unwei <- list()
for (v in vars_exist) {
# pega só Sample.id e a variável
df <- metadados_grupos_saude_binario_[, c("Sample.id", v), drop = FALSE]
df <- df[!is.na(df[[v]]), , drop = FALSE]
# IDs em comum entre a variável e a matriz de distância
ids_ok <- intersect(df$Sample.id, labels(dist_mat_unwei))
if (length(ids_ok) < 3) next
# reordena df pela ordem que vamos usar
df <- df[match(ids_ok, df$Sample.id), , drop = FALSE]
# cria submatriz da distância na MESMA ordem de df
M <- as.matrix(dist_mat_unwei)[ids_ok, ids_ok]
d_sub <- as.dist(M)
attr(d_sub, "Labels") <- ids_ok
# fatoriza se for texto e pula sem variação
if (is.character(df[[v]])) df[[v]] <- factor(df[[v]])
if (length(unique(df[[v]])) < 2) next
# PERMANOVA
res <- adonis2(d_sub ~ df[[v]], permutations = 999)
result_list_unwei[[v]] <- data.frame(
Variable = v,
F_value  = unname(res$F[1]),
R2       = unname(res$R2[1]),
p_value  = unname(res$`Pr(>F)`[1])
)
}
for (v in vars_exist) {
# pega só Sample.id e a variável
df <- metadados_grupos_saude_binario_[, c("Sample.id", v), drop = FALSE]
df <- df[!is.na(df[[v]]), , drop = FALSE]
# IDs em comum entre a variável e a matriz de distância
ids_ok <- intersect(df$Sample.id, labels(dist_mat_unwei))
if (length(ids_ok) < 3) next
# reordena df pela ordem que vamos usar
df <- df[match(ids_ok, df$Sample.id), , drop = FALSE]
# cria submatriz da distância na MESMA ordem de df
M <- as.matrix(dist_mat_unwei)[ids_ok, ids_ok]
d_sub <- as.dist(M)
attr(d_sub, "Labels") <- ids_ok
# fatoriza se for texto e pula sem variação
if (is.character(df[[v]])) df[[v]] <- factor(df[[v]])
if (length(unique(df[[v]])) < 2) next
# PERMANOVA
res <- adonis2(d_sub ~ df[[v]], permutations = 999)
result_list_unwei[[v]] <- data.frame(
Variable = v,
F_value  = unname(res$F[1]),
R2       = unname(res$R2[1]),
p_value  = unname(res$`Pr(>F)`[1])
)
}
permanova_results_unwei <- bind_rows(result_list_unwei) %>% arrange(p_value)
print(permanova_results_unwei)
#Filtrar apenas os significativos (p < 0.05)
permanova_sig_unwei <- permanova_results_unwei[permanova_results_unwei$p_value < 0.05, ]
print(permanova_sig_unwei)
#Filtrar apenas os significativos (p < 0.05)
permanova_sig_unwei <- permanova_results_unwei[permanova_results_unwei$p_value < 0.05, ]
print(permanova_sig_unwei)
```{r}
#Ordenar por p-valor
permanova_sorted_unwei <- permanova_results_unwei[order(permanova_results_unwei$p_value), ]
head(permanova_sorted_unwei, 10)  # top 10
ggplot(permanova_sig_unwei, aes(x = reorder(Variable, -R2), y = R2)) +
geom_col(fill = "steelblue") +
coord_flip() +
theme_minimal() +
labs(
title = "PERMANOVA UNWEIGHTED – R² of significant variables",
x = "Variable",
y = expression(R^2)
)
ggplot(permanova_sig_unwei, aes(x = reorder(Variable, -R2), y = R2)) +
geom_col(fill = "steelblue") +
coord_flip() +
theme_minimal() +
labs(
title = "PERMANOVA UNWEIGHTED – R² of significant variables",
x = "Variable",
y = expression(R^2)
)
ggsave("C:/Users/polia/OneDrive/Desktop/EstatisticaR/AgrUrbana/16S_AgriUrbana/Planilhas_UrbanAgri/Para_Dissertação/permanova_significant_variables_unwei.png",
width = 20, height = 15, units = "cm", dpi = 300)
ggplot(permanova_sig_unwei, aes(x = reorder(Variable, -R2), y = R2)) +
geom_col(fill = "steelblue") +
coord_flip() +
theme_minimal() +
labs(
title = "PERMANOVA UNWEIGHTED – R² of significant variables",
x = "Variable",
y = expression(R^2)
)
ggplot(permanova_sig_unwei, aes(x = reorder(Variable, -R2), y = R2)) +
geom_col(fill = "steelblue") +
coord_flip() +
theme_minimal() +
labs(
title = "PERMANOVA UNWEIGHTED – R² of significant variables",
x = "Variable",
y = expression(R^2)
)
permanova_results_unwei$log10_p <- -log10(permanova_results_unwei$p_value)
permanova_results_unwei$significativo <- permanova_results_unwei$p_value < 0.05
ggplot(permanova_results_unwei, aes(x = R2, y = log10_p, label = Variable)) +
geom_point(aes(color = significativo), size = 2) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "red") +
geom_text(data = subset(permanova_results_unwei, significativo == TRUE),
hjust = 0.5, vjust = -0.5, size = 3) +
scale_color_manual(values = c("FALSE" = "gray60", "TRUE" = "steelblue"),
labels = c("Not significant", "Significant")) +
theme_minimal() +
labs(
title = "PERMANOVA UNWEIGHTED – Effect size vs. Significance",
x = expression(R^2),
y = expression(-log[10](p~value)),
color = "Significance"
) +
theme(legend.position = "bottom")
#Com nome de todas as variaveis
# Instale ggrepel se ainda não tiver
# install.packages("ggrepel")
library(ggrepel)
ggplot(permanova_results_unwei, aes(x = R2, y = -log10(p_value), label = Variable)) +
geom_point(aes(color = significativo), size = 2) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "red") +
geom_text_repel(size = 3, max.overlaps = Inf) +  # Adiciona o nome de todas as variáveis
scale_color_manual(values = c("FALSE" = "gray60", "TRUE" = "steelblue"),
labels = c("Not significant", "Significant")) +
theme_minimal() +
labs(
title = "PERMANOVA UNWEIGHTED – Effect size vs. Significance",
x = expression(R^2),
y = expression(-log[10](p~value)),
color = "Significance"
) +
theme(legend.position = "bottom")
ggplot(permanova_results_unwei, aes(x = R2, y = -log10(p_value), label = Variable)) +
geom_point(aes(color = significativo), size = 2) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "red") +
geom_text_repel(size = 3, max.overlaps = Inf) +  # Adiciona o nome de todas as variáveis
scale_color_manual(values = c("FALSE" = "gray60", "TRUE" = "steelblue"),
labels = c("Not significant", "Significant")) +
theme_minimal() +
labs(
title = "PERMANOVA UNWEIGHTED – Effect size vs. Significance",
x = expression(R^2),
y = expression(-log[10](p~value)),
color = "Significance"
) +
theme(legend.position = "bottom")
ggsave("C:/Users/polia/OneDrive/Desktop/EstatisticaR/AgrUrbana/16S_AgriUrbana/Planilhas_UrbanAgri/Para_Dissertação/volcanoPlot_significant_variables_withLabel_unwei.png",
width = 20, height = 15, units = "cm", dpi = 300)
ggplot(permanova_results_unwei, aes(x = R2, y = -log10(p_value), label = Variable)) +
geom_point(aes(color = significativo), size = 2) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "red") +
geom_text_repel(size = 3, max.overlaps = Inf) +  # Adiciona o nome de todas as variáveis
scale_color_manual(values = c("FALSE" = "gray60", "TRUE" = "steelblue"),
labels = c("Not significant", "Significant")) +
theme_minimal() +
labs(
title = "PERMANOVA UNWEIGHTED – Effect size vs. Significance",
x = expression(R^2),
y = expression(-log[10](p~value)),
color = "Significance"
) +
theme(legend.position = "bottom")
permanova_results_wei$log10_p <- -log10(permanova_results_wei$p_value)
permanova_results_wei$significativo <- permanova_results_wei$p_value < 0.05
ggplot(permanova_results_wei, aes(x = R2, y = -log10(p_value), label = Variable)) +
geom_point(aes(color = significativo), size = 2) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "red") +
geom_text_repel(size = 3, max.overlaps = Inf) +  # Adiciona o nome de todas as variáveis
scale_color_manual(values = c("FALSE" = "gray60", "TRUE" = "steelblue"),
labels = c("Not significant", "Significant")) +
theme_minimal() +
labs(
title = "PERMANOVA WEIGHTED – Effect size vs. Significance",
x = expression(R^2),
y = expression(-log[10](p~value)),
color = "Significance"
) +
theme(legend.position = "bottom")
ggplot(permanova_results_wei, aes(x = R2, y = -log10(p_value), label = Variable)) +
geom_point(aes(color = significativo), size = 2) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "red") +
geom_text_repel(size = 3, max.overlaps = Inf) +  # Adiciona o nome de todas as variáveis
scale_color_manual(values = c("FALSE" = "gray60", "TRUE" = "steelblue"),
labels = c("Not significant", "Significant")) +
theme_minimal() +
labs(
title = "PERMANOVA WEIGHTED – Effect size vs. Significance",
x = expression(R^2),
y = expression(-log[10](p~value)),
color = "Significance"
) +
theme(legend.position = "bottom")
ggplot(permanova_results_wei, aes(x = R2, y = -log10(p_value), label = Variable)) +
geom_point(aes(color = significativo), size = 2) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "red") +
geom_text_repel(size = 3, max.overlaps = Inf) +  # Adiciona o nome de todas as variáveis
scale_color_manual(values = c("FALSE" = "gray60", "TRUE" = "steelblue"),
labels = c("Not significant", "Significant")) +
theme_minimal() +
labs(
title = "PERMANOVA WEIGHTED – Effect size vs. Significance",
x = expression(R^2),
y = expression(-log[10](p~value)),
color = "Significance"
) +
theme(legend.position = "bottom")
ggsave("C:/Users/polia/OneDrive/Desktop/EstatisticaR/AgrUrbana/16S_AgriUrbana/Planilhas_UrbanAgri/Para_Dissertação/volcanoPlot_significant_variables_withLabel_wei.png",
width = 20, height = 15, units = "cm", dpi = 300)
ggplot(permanova_results_wei, aes(x = R2, y = -log10(p_value), label = Variable)) +
geom_point(aes(color = significativo), size = 2) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "red") +
geom_text_repel(size = 3, max.overlaps = Inf) +  # Adiciona o nome de todas as variáveis
scale_color_manual(values = c("FALSE" = "gray60", "TRUE" = "steelblue"),
labels = c("Not significant", "Significant")) +
theme_minimal() +
labs(
title = "PERMANOVA WEIGHTED – Effect size vs. Significance",
x = expression(R^2),
y = expression(-log[10](p~value)),
color = "Significance"
) +
theme(legend.position = "bottom")
ggplot(permanova_results_unwei, aes(x = R2, y = -log10(p_value), label = Variable)) +
geom_point(aes(color = significativo), size = 2) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "red") +
geom_text_repel(size = 3, max.overlaps = Inf) +  # Adiciona o nome de todas as variáveis
scale_color_manual(values = c("FALSE" = "gray60", "TRUE" = "steelblue"),
labels = c("Not significant", "Significant")) +
theme_minimal() +
labs(
title = "PERMANOVA UNWEIGHTED – Effect size vs. Significance",
x = expression(R^2),
y = expression(-log[10](p~value)),
color = "Significance"
) +
theme(legend.position = "bottom")
ggsave("C:/Users/polia/OneDrive/Desktop/EstatisticaR/AgrUrbana/16S_AgriUrbana/Planilhas_UrbanAgri/Para_Dissertação/volcanoPlot_significant_variables_withLabel_unwei.png",
width = 20, height = 15, units = "cm", dpi = 300)
ggplot(permanova_results_unwei, aes(x = R2, y = -log10(p_value), label = Variable)) +
geom_point(aes(color = significativo), size = 2) +
geom_hline(yintercept = -log10(0.05), linetype = "dashed", color = "red") +
geom_text_repel(size = 3, max.overlaps = Inf) +  # Adiciona o nome de todas as variáveis
scale_color_manual(values = c("FALSE" = "gray60", "TRUE" = "steelblue"),
labels = c("Not significant", "Significant")) +
theme_minimal() +
labs(
title = "PERMANOVA UNWEIGHTED – Effect size vs. Significance",
x = expression(R^2),
y = expression(-log[10](p~value)),
color = "Significance"
) +
theme(legend.position = "bottom")
length(metadados_grupos_saude_binario_$Sample.id)       # deve ser 97
# Pegar os IDs presentes nos dois
ids_comuns <- intersect(rownames(unweighted.unifrac), dados_tyG_bin$Sample.id)
#primeiro ver quais rows nao estao nos dois objetos
# Checar os IDs
length(rownames(unweighted.unifrac))  # deve ser 105
length(metadados_grupos_saude_binario_$Sample.id)       # deve ser 97
#primeiro ver quais rows nao estao nos dois objetos
# Checar os IDs
length(rownames(unweighted.unifrac))  # deve ser 105
colnames(unweighted.unifrac)
install.packages(c("usethis", "gitcreds"))
usethis::create_github_token()   # abre a página do GitHub para criar o token
# copie o token gerado e depois:
gitcreds::gitcreds_set()         # cole o token quando solicitado
gitcreds::gitcreds_get()   # confere host/username (sem revelar a senha)
usethis::git_sitrep()      # diagnóstico geral
source("C:/Users/polia/OneDrive/Desktop/EstatisticaR/AgrUrbana/16S_AgriUrbana/AgriculturaUrbana_Analises/codigos_exemplos.R")
setwd("C:/Users/polia/OneDrive/Desktop/EstatisticaR/AgrUrbana/16S_AgriUrbana/AgriculturaUrbana_Analises")
getwd()
usethis::git_sitrep()
usethis::use_git()
dir(".", all.files = TRUE)
usethis::use_git()
usethis::use_github()
getwd()
system("git --version")
system('git config --global user.name "Poliana Scarcella D’Oliveira"')
system('git config --global user.email "polianasd@usp.br"')
# (opcionais recomendados)
system('git config --global init.defaultBranch main')
system('git config --global credential.helper manager')  # Windows: usa o Git Credential Manager
install.packages(c("usethis","gitcreds"), dependencies = TRUE)
usethis::create_github_token()   # abre a página do GitHub
install.packages("gitcreds")
gitcreds::gitcreds_set()
gitcreds::gitcreds_get()   # não mostra o token, só host/username
getwd
getwd()
# inicializa git (se ainda não tiver .git)
system("git init")
system("git add .")
system('git commit -m "Primeiro commit"')
# configure o remoto (troque NOME_DO_REPO)
system('git remote add origin https://github.com/polianasdUSP/NOME_DO_REPO.git')
system("git branch -M main")
system("git push -u origin main")
# Inicializa Git no projeto (se ainda não tiver .git)
system("git init")
# Adiciona todos os arquivos
system("git add .")
# Faz o commit inicial
system('git commit -m "Primeiro commit"')
# Adiciona o remoto (copie a URL HTTPS do seu repositório recém-criado no GitHub)
system('git remote add origin https://github.com/SEU_USUARIO/SEU_REPO.git')
# Garante que o branch se chama main
system("git branch -M main")
# E
# Força adição de todos arquivos exceto o submódulo
system('git add -A')
system('git commit -m "Primeiro commit"')
git remote remove origin
system("git submodule status")
system("git submodule init")
system("git submodule update")
# Ver o status do submódulo
system("cd UrbanAgriculture && git status")
# (opcional) garantir que o remoto está certo
system("cd UrbanAgriculture && git remote -v")
# se precisar ajustar o remoto:
# system('cd UrbanAgriculture && git remote set-url origin https://github.com/polianasdUSP/UrbanAgriculture.git')
# Commitar as mudanças do submódulo
system("cd UrbanAgriculture && git add -A")
system('cd UrbanAgriculture && git commit -m "Atualiza conteúdo do submódulo"')
# Enviar para o GitHub do submódulo
system("cd UrbanAgriculture && git push -u origin HEAD:main")
