rownames_to_column("Feature.ID") %>%
gather(-Feature.ID, key = "Sample.id", value = "Abundance")
View(SVs_long)
SVs_long <- SVs_long %>%
mutate(NormAbundance = log10(Abundance + 0.01))  # Adiciona 0.01 para evitar log(0)
# Exportar para uma planilha
write.csv(SVs_long, "C:/Users/polia/OneDrive/Desktop/EstatisticaR/AgrUrbana/16S_AgriUrbana/Planilhas_UrbanAgri/SVs_normalized_log_transformed.csv", row.names = FALSE)
library(ggplot2)
library(pheatmap)
# Converter de volta para formato largo para o heatmap
SVs_matrix <- SVs_long %>%
select(Feature.ID, Sample.id, NormAbundance) %>%
spread(key = Sample.id, value = NormAbundance, fill = 0) %>%
column_to_rownames("Feature.ID")
# Definir a paleta de cores com branco no centro
color_palette <- colorRampPalette(c("blue", "white", "red"))(50)
# Gerar o heatmap com o ponto zero centralizado na cor branca
heatmap_ASVs <- pheatmap(SVs_matrix,
clustering_method = "ward.D2",  # Método de clusterização
clustering_distance_rows = "euclidean",  # Distância para ASVs
clustering_distance_cols = "euclidean",  # Distância para amostras
scale = "row",  # Escala por linha para melhor visualização
main = "Heatmap of the ASVs (Normalized and Log-Transformed)",
color = color_palette)
library(pheatmap)
# Selecionar as 50 ASVs mais abundantes
top_ASVs <- rowSums(SVs_matrix) %>% sort(decreasing = TRUE) %>% head(50) %>% names()
SVs_matrix_top <- SVs_matrix[top_ASVs, ]
# Criar a paleta de cores com branco centralizado
color_palette <- colorRampPalette(c("blue", "white", "red"))(100)
# Gerar o heatmap com as top 50 ASVs
heatmap_ASVs_50_most <- pheatmap(SVs_matrix_top,
clustering_method = "ward.D2",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
scale = "row",
main = "Heatmap of the 50 Most Abundant ASVs (Normalized and Log-Transformed)",
color = color_palette)
library(dplyr)
# Remover as colunas indesejadas do metadata
metadata_filtered <- metadados.all.filtrado %>%
select(-c("Gravida", "Menopausa", "Raca", "Gravida", "Weight", "Height","Hip","WHR" ,  "energia2_kcal","sample.plate", "SoFAAS_Score", "Sat_Fat_Score", "Sodium_Score", "grain_roots_tubers_score", "milk_dairy_score",                 "total_fruit_score" ,  "total_vegetable_score" ,  "vegetable_oils_nuts_fishoil_score",  "dark_green_orange_veg_legume_score", "whole_fruit_score", "whole_grain_score"  , "ConsumoGrupo_NOVA_group_1" ,         "ConsumoGrupo_NOVA_group_2" ,  "ConsumoGrupo_NOVA_group_3" ,  "ConsumoCategoria"  , "BMI", "VAI" , "QUICKI", "METS_IR",  "TyG_BMI" ,  "TyG_WC" , "ACE" , "VAI"                                                                ))
str(metadata_filtered)
# Juntar ASVs_long com metadata filtrado
# Assumindo que a coluna de junção seja "Sample.id" em ASVs_long e "SampleID" em metadata_filtered
metadata_ASVs <- SVs_long %>%
inner_join(metadata_filtered, by = c("Sample.id" = "Sample.id"))
View(metadata_ASVs)
library(dplyr)
# Juntar o objeto taxonomy ao metadata_ASVs usando a coluna Feature.ID
metadata_ASVs <- metadata_ASVs %>%
left_join(taxonomy %>% select(Feature.ID, Taxon, Confidence), by = "Feature.ID")
# Reorganizar para que Taxon seja a segunda coluna e Confidence a terceira
metadata_ASVs <- metadata_ASVs %>%
select(Feature.ID, Taxon, Confidence, everything())
# Visualizar o resultado
metadata_ASVs
# Reorganizar para que Sample.id seja a primeira coluna
metadata_ASVs <- metadata_ASVs %>%
select(Sample.id, everything())
# Visualizar o resultado
glimpse(metadata_ASVs)
library(dplyr)
library(ggplot2)
# Plotar o heatmap
heatmap_normalized_abundance <- ggplot(metadata_ASVs, aes(x = Sample.id, y = Feature.ID, fill = NormAbundance)) +
geom_tile() +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_viridis_c(name = "NormAbundance") +
labs(title = "Heatmap of the ASVs (Normalized and Log-Transformed)", x = "Sample ID", y = "ASV (Feature.ID e Taxonomia)")
metadata_filtered_inf <- metadata_filtered %>% filter(!is.na(IL17A))
# Juntar ASVs_long com metadata filtrado
# Assumindo que a coluna de junção seja "Sample.id" em ASVs_long e "Sample.id" em metadata_filtered
metadata_ASVs_inf <- SVs_long %>%
inner_join(metadata_filtered_inf, by = c("Sample.id" = "Sample.id"))
library(dplyr)
# Juntar o objeto taxonomy ao metadata_ASVs usando a coluna Feature.ID
metadata_ASVs_inf <- metadata_ASVs_inf %>%
left_join(taxonomy %>% select(Feature.ID, Taxon, Confidence), by = "Feature.ID")
# Reorganizar para que Taxon seja a segunda coluna e Confidence a terceira
metadata_ASVs_inf <- metadata_ASVs_inf %>%
select(Feature.ID, Taxon, Confidence, everything())
# Visualizar o resultado
metadata_ASVs_inf
# Reorganizar para que Sample.id seja a primeira coluna
metadata_ASVs_inf <- metadata_ASVs_inf %>%
select(Sample.id, everything())
# Visualizar o resultado
glimpse(metadata_ASVs_inf)
library(dplyr)
library(tidyr)
library(pheatmap)
library(tibble)
# 1. Selecionar apenas colunas relevantes de saúde
# Corrigido
inflammatory_markers_ASVs <- metadata_ASVs_inf %>%
select(Sample.id,  Feature.ID, Taxon, Confidence,  Abundance, NormAbundance, IL17A, IFNGamma, TNF, IL10, IL6, IL4, IL2, INSULINA,
PCR)
View(inflammatory_markers_ASVs)
# 2. Calcular correlações para cada ASV com as variáveis de saúde
cor_results <- inflammatory_markers_ASVs %>%
group_by(Feature.ID) %>%
summarize(across(
.cols = c(IL17A, IFNGamma, TNF, IL10, IL6, IL4, IL2, INSULINA,
PCR),
.fns = ~ cor(NormAbundance, .x, use = "complete.obs"),
.names = "cor_{.col}"
)) %>%
ungroup()
View(inflammatory_markers_ASVs)
# 2. Calcular correlações para cada ASV com as variáveis de saúde
cor_results <- inflammatory_markers_ASVs %>%
group_by(Feature.ID) %>%
summarize(across(
.cols = c(IL17A, IFNGamma, TNF, IL10, IL6, IL4, IL2, INSULINA,
PCR),
.fns = ~ cor(NormAbundance, .x, use = "complete.obs"),
.names = "cor_{.col}"
)) %>%
ungroup()
View(metadata_filtered)
View(metadata_filtered)
metadata_filtered_inf <- metadata_filtered %>% filter(!is.na(IL17A))
View(metadata_filtered)
View(metadata_ASVs_inf)
# Juntar o objeto taxonomy ao metadata_ASVs usando a coluna Feature.ID
metadata_ASVs_inf <- metadata_ASVs_inf %>%
left_join(taxonomy %>% select(Feature.ID, Taxon, Confidence), by = "Feature.ID")
View(metadata_ASVs_inf)
# Reorganizar para que Taxon seja a segunda coluna e Confidence a terceira
metadata_ASVs_inf <- metadata_ASVs_inf %>%
select(Feature.ID, Taxon, Confidence, everything())
View(metadata_ASVs_inf)
# Reorganizar para que Sample.id seja a primeira coluna
metadata_ASVs_inf <- metadata_ASVs_inf %>%
select(Sample.id, everything())
View(metadata_ASVs_inf)
# Visualizar o resultado
glimpse(metadata_ASVs_inf)
# 1. Selecionar apenas colunas relevantes de saúde
# Corrigido
inflammatory_markers_ASVs <- metadata_ASVs_inf %>%
select(Sample.id,  Feature.ID, Taxon, Confidence,  Abundance, NormAbundance, IL17A, IFNGamma, TNF, IL10, IL6, IL4, IL2, INSULINA,
PCR)
colnames(metadata_ASVs_inf)
library(dplyr)
metadata_ASVs_inf <- metadata_ASVs_inf %>%
rename_with(~ gsub("\\.y$", "", .), ends_with(".y"))
colnames(metadata_ASVs_inf)
# 1. Selecionar apenas colunas relevantes de saúde
# Corrigido
inflammatory_markers_ASVs <- metadata_ASVs_inf %>%
select(Sample.id,  Feature.ID, Taxon, Confidence,  Abundance, NormAbundance, IL17A, IFNGamma, TNF, IL10, IL6, IL4, IL2, INSULINA,
PCR)
# 2. Calcular correlações para cada ASV com as variáveis de saúde
cor_results <- inflammatory_markers_ASVs %>%
group_by(Feature.ID) %>%
summarize(across(
.cols = c(IL17A, IFNGamma, TNF, IL10, IL6, IL4, IL2, INSULINA,
PCR),
.fns = ~ cor(NormAbundance, .x, use = "complete.obs"),
.names = "cor_{.col}"
)) %>%
ungroup()
colnames(inflammatory_markers_ASVs)
safe_cor <- function(x, y) {
if (sum(complete.cases(x, y)) >= 2) {
tryCatch(cor(x, y, use = "complete.obs"), error = function(e) NA_real_)
} else {
NA_real_
}
}
cor_results <- inflammatory_markers_ASVs %>%
group_by(Feature.ID) %>%
summarise(
cor_IL17A     = safe_cor(NormAbundance, IL17A),
cor_IFNGamma  = safe_cor(NormAbundance, IFNGamma),
cor_TNF       = safe_cor(NormAbundance, TNF),
cor_IL10      = safe_cor(NormAbundance, IL10),
cor_IL6       = safe_cor(NormAbundance, IL6),
cor_IL4       = safe_cor(NormAbundance, IL4),
cor_IL2       = safe_cor(NormAbundance, IL2),
cor_INSULINA  = safe_cor(NormAbundance, INSULINA),
cor_PCR       = safe_cor(NormAbundance, PCR)
) %>%
ungroup()
#4. Transformar em formato longo
cor_long <- cor_results %>%
pivot_longer(cols = starts_with("cor_"), names_to = "Health_Param", values_to = "Correlation") %>%
mutate(Health_Param = gsub("cor_", "", Health_Param))
# 5. Criar matriz
cor_matrix <- cor_long %>%
pivot_wider(names_from = Health_Param, values_from = Correlation) %>%
column_to_rownames("Feature.ID") %>%
as.matrix()
# 6. Heatmap
color_palette <- colorRampPalette(c("blue", "white", "red"))(50)
breaks <- seq(-0.5, 0.5, length.out = 51)
p <- pheatmap(cor_matrix,
clustering_method = "ward.D2",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
main = "Correlation Heatmap between ASVs and Inflammatory Markers",
color = color_palette,
breaks = breaks,
border_color = NA)
ggsave("C:/Users/polia/OneDrive/Desktop/EstatisticaR/AgrUrbana/16S_AgriUrbana/Planilhas_UrbanAgri/Para_Dissertação/heatmap_ASVvsInflamatMarkers.png", p,  width = 24, height = 16, dpi = 300)
library(dplyr)
library(tidyr)
# Função para calcular correlação e p-valor
calc_cor_p <- function(x, y) {
valid <- complete.cases(x, y)
if (sum(valid) > 2) {
res <- suppressWarnings(cor.test(x[valid], y[valid]))
return(c(correlation = as.numeric(res$estimate), p_value = res$p.value))
} else {
return(c(correlation = NA_real_, p_value = NA_real_))
}
}
# Lista de variáveis de saúde
Inflammatory_vars <- c("IL17A", "IFNGamma", "TNF", "IL10", "IL6", "IL4", "IL2", "INSULINA",
"PCR")
# Criar uma lista vazia para guardar os resultados
cor_list <- list()
# Loop pelas variáveis de saúde
for (var in Inflammatory_vars) {
temp <- inflammatory_markers_ASVs %>%
group_by(Feature.ID) %>%
summarise(
correlation = calc_cor_p(NormAbundance, .data[[var]])["correlation"],
p_value = calc_cor_p(NormAbundance, .data[[var]])["p_value"]
) %>%
ungroup() %>%
mutate(variable = var) %>%
mutate(
correlation = as.numeric(correlation),
p_value = as.numeric(p_value)
)
# Armazenar na lista
cor_list[[var]] <- temp
}
# Unir todos os resultados
cor_inflammatory <- bind_rows(cor_list)
# Ajustar p-valor com FDR
cor_inflammatory <- cor_inflammatory %>%
group_by(variable) %>%
mutate(p_adj = p.adjust(p_value, method = "fdr")) %>%
ungroup()
# Marcar significância
cor_inflammatory <- cor_inflammatory %>%
mutate(star = case_when(
p_adj < 0.001 ~ "***",
p_adj < 0.01 ~ "**",
p_adj < 0.05 ~ "*",
TRUE ~ ""
))
cor_signif_inflammatory <- cor_inflammatory %>%
filter(p_adj < 0.05)
cor_inflammatory %>%
filter(p_adj < 0.05) %>%
arrange(desc(abs(correlation)))
View(cor_inflammatory)
# Visualizar resultados formatados
head(cor_inflammatory)
cor_signif_inflammatory <- cor_inflammatory %>%
filter(p_adj < 0.05)
cor_inflammatory %>%
filter(p_adj < 0.05) %>%
arrange(desc(abs(correlation)))
library(pheatmap)
library(dplyr)
library(tidyr)
library(tibble)
# 1. Selecionar apenas ASVs com pelo menos uma correlação significativa (FDR < 0.05)
asvs_signif <- cor_inflammatory %>%
filter(p_adj < 0.05) %>%
pull(Feature.ID) %>%
unique()
# 2. Criar matriz de correlação apenas com ASVs significativas
cor_matrix <- cor_inflammatory %>%
filter(Feature.ID %in% asvs_signif) %>%
select(Feature.ID, variable, correlation) %>%
pivot_wider(names_from = variable, values_from = correlation) %>%
column_to_rownames("Feature.ID") %>%
as.matrix()
# 3. Criar matriz de asteriscos para significância (p_adj)
star_matrix <- cor_inflammatory %>%
filter(Feature.ID %in% asvs_signif) %>%
select(Feature.ID, variable, star) %>%
pivot_wider(names_from = variable, values_from = star) %>%
column_to_rownames("Feature.ID") %>%
as.matrix()
# 4. Paleta de cores e quebras
color_palette <- colorRampPalette(c("blue", "white", "red"))(100)
breaks <- seq(-0.5, 0.5, length.out = 101)
# 5. Gerar o heatmap com significância destacada
p <- pheatmap(cor_matrix,
display_numbers = star_matrix,
number_color = "white",  # cor dos asteriscos
clustering_method = "ward.D2",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
color = color_palette,
breaks = breaks,
main = "Significant Correlations: ASVs vs Inflammatory Markers (n = 76) \n(FDR < 0.05)",
fontsize_row = 8,
fontsize_col = 12,
fontsize_number = 16, # tamanho dos asteriscos
border_color = NA)
ggsave("C:/Users/polia/OneDrive/Desktop/EstatisticaR/AgrUrbana/16S_AgriUrbana/Planilhas_UrbanAgri/Para_Dissertação/heatmap_Significant_correlation_ASVvsInflamatMarkers.png", p,  width = 24, height = 16, dpi = 300)
# Filtrar apenas ASVs com significância
asvs_signif_df <- cor_inflammatory %>%
filter(p_adj < 0.05) %>%
distinct(Feature.ID)
# Juntar com a tabela de taxonomia
asvs_tax_signif <- asvs_signif_df %>%
left_join(taxonomy, by = "Feature.ID")
# Visualizar
head(asvs_tax_signif)
View(asvs_tax_signif)
library(tidyr)
asvs_tax_signif <- asvs_tax_signif %>%
separate(Taxon, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
sep = ";", fill = "right", remove = FALSE, extra = "drop") %>%
mutate(across(Domain:Species, ~ gsub("^[a-z]__*", "", .)))  # Remove prefixos tipo "g__"
# Garantir que os Feature.IDs do heatmap estão no objeto com taxonomia
tax_annot <- taxonomy %>%
filter(Feature.ID %in% rownames(cor_matrix)) %>%
separate(Taxon, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
sep = ";", fill = "right", extra = "drop", remove = FALSE) %>%
mutate(across(Domain:Species, ~ gsub("^[a-z]__*", "", .))) %>%
select(Feature.ID, Phylum, Family, Genus)  # escolha os níveis que quer mostrar
# Criar data frame com os Feature.IDs como rownames
annotation_row <- tax_annot %>%
column_to_rownames("Feature.ID")  # Importante: rownames devem ser iguais ao cor_matrix
library(grid)
# Gerar o pheatmap
p <- pheatmap(cor_matrix,
display_numbers = star_matrix,
number_color = "white",
clustering_method = "ward.D2",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
color = color_palette,
breaks = breaks,
main = "Taxons  vs Inflammatory Markers (n = 76) \n(FDR < 0.05)",
fontsize = 20,
fontsize_row = 10,
fontsize_col = 20,
fontsize_number = 28,
border_color = NA,
annotation_row = annotation_row)
# 1. Criar coluna de nome taxonômico compacto
taxonomy_named <- taxonomy %>%
filter(Feature.ID %in% rownames(cor_matrix)) %>%
separate(Taxon, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"),
sep = ";", fill = "right", extra = "drop") %>%
mutate(across(Domain:Species, ~ gsub("^[a-z]__*", "", .))) %>%
mutate(Taxon_Label = paste(Phylum, Family, Genus, sep = " | ")) %>%
select(Feature.ID, Taxon_Label)
# 2. Substituir rownames da matriz de correlação
rownames(cor_matrix) <- taxonomy_named$Taxon_Label[match(rownames(cor_matrix), taxonomy_named$Feature.ID)]
rownames(star_matrix) <- rownames(cor_matrix)  # para manter igual
# 3. Gerar o heatmap padrão com nomes taxonômicos
p <- pheatmap(cor_matrix,
display_numbers = star_matrix,
number_color = "white",
clustering_method = "ward.D2",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
color = color_palette,
breaks = breaks,
main = "Correlation Heatmap: Taxons vs Inflammatory Markers (n = 76)\n(FDR < 0.05)",
fontsize = 10,
fontsize_row = 8,
fontsize_col = 12,
fontsize_number = 12,
border_color = NA)
ggsave("C:/Users/polia/OneDrive/Desktop/EstatisticaR/AgrUrbana/16S_AgriUrbana/Planilhas_UrbanAgri/Para_Dissertação/heatmap_Significant_correlation_TaxonvsInflamatMarkers.png", p,  width = 35, height = 20, dpi = 300)
# 3. Gerar o heatmap padrão com nomes taxonômicos
p <- pheatmap(cor_matrix,
display_numbers = star_matrix,
number_color = "white",
clustering_method = "ward.D2",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
color = color_palette,
breaks = breaks,
main = "Correlation Heatmap: Taxons vs Inflammatory Markers (n = 76)\n(FDR < 0.05)",
fontsize = 14,
fontsize_row = 16,
fontsize_col = 16,
fontsize_number = 14,
border_color = NA)
ggsave("C:/Users/polia/OneDrive/Desktop/EstatisticaR/AgrUrbana/16S_AgriUrbana/Planilhas_UrbanAgri/Para_Dissertação/heatmap_Significant_correlation_TaxonvsInflamatMarkers.png", p,  width = 35, height = 20, dpi = 300)
# 3. Gerar o heatmap padrão com nomes taxonômicos
p <- pheatmap(cor_matrix,
display_numbers = star_matrix,
number_color = "white",
clustering_method = "ward.D2",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
color = color_palette,
breaks = breaks,
main = "Correlation Heatmap: Taxons vs Inflammatory Markers (n = 76)\n(FDR < 0.05)",
fontsize = 18,
fontsize_row = 18,
fontsize_col = 18,
fontsize_number = 20,
border_color = NA)
ggsave("C:/Users/polia/OneDrive/Desktop/EstatisticaR/AgrUrbana/16S_AgriUrbana/Planilhas_UrbanAgri/Para_Dissertação/heatmap_Significant_correlation_TaxonvsInflamatMarkers.png", p,  width = 35, height = 20, dpi = 300)
# 3. Gerar o heatmap padrão com nomes taxonômicos
p <- pheatmap(cor_matrix,
display_numbers = star_matrix,
number_color = "white",
clustering_method = "ward.D2",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
color = color_palette,
breaks = breaks,
main = "Correlation Heatmap: Taxons vs Inflammatory Markers (n = 76)\n(FDR < 0.05)",
fontsize = 18,
fontsize_row = 18,
fontsize_col = 18,
fontsize_number = 26,
border_color = NA)
ggsave("C:/Users/polia/OneDrive/Desktop/EstatisticaR/AgrUrbana/16S_AgriUrbana/Planilhas_UrbanAgri/Para_Dissertação/heatmap_Significant_correlation_TaxonvsInflamatMarkers.png", p,  width = 35, height = 20, dpi = 300)
# 5. Gerar o heatmap com significância destacada
p <- pheatmap(cor_matrix,
display_numbers = star_matrix,
number_color = "white",  # cor dos asteriscos
clustering_method = "ward.D2",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
color = color_palette,
breaks = breaks,
main = "Significant Correlations: ASVs vs Inflammatory Markers (n = 76) \n(FDR < 0.05)",
fontsize = 18,
fontsize_row = 18,
fontsize_col = 18,
fontsize_number = 26, # tamanho dos asteriscos
border_color = NA)
ggsave("C:/Users/polia/OneDrive/Desktop/EstatisticaR/AgrUrbana/16S_AgriUrbana/Planilhas_UrbanAgri/Para_Dissertação/heatmap_Significant_correlation_ASVvsInflamatMarkers.png", p,  width = 24, height = 16, dpi = 300)
# 5. Gerar o heatmap com significância destacada
p <- pheatmap(cor_matrix,
display_numbers = star_matrix,
number_color = "white",  # cor dos asteriscos
clustering_method = "ward.D2",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
color = color_palette,
breaks = breaks,
main = "Significant Correlations: ASVs vs Inflammatory Markers (n = 76) \n(FDR < 0.05)",
fontsize = 18,
fontsize_row = 18,
fontsize_col = 18,
fontsize_number = 26, # tamanho dos asteriscos
border_color = NA)
ggsave("C:/Users/polia/OneDrive/Desktop/EstatisticaR/AgrUrbana/16S_AgriUrbana/Planilhas_UrbanAgri/Para_Dissertação/heatmap_Significant_correlation_ASVvsInflamatMarkers.png", p,  width = 35, height = 20, dpi = 300)
# 5. Gerar o heatmap com significância destacada
p <- pheatmap(cor_matrix,
display_numbers = star_matrix,
number_color = "white",  # cor dos asteriscos
clustering_method = "ward.D2",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
color = color_palette,
breaks = breaks,
main = "Significant Correlations: ASVs vs Inflammatory Markers (n = 76) \n(FDR < 0.05)",
fontsize = 18,
fontsize_row = 18,
fontsize_col = 18,
fontsize_number = 26, # tamanho dos asteriscos
border_color = NA)
ggsave("C:/Users/polia/OneDrive/Desktop/EstatisticaR/AgrUrbana/16S_AgriUrbana/Planilhas_UrbanAgri/Para_Dissertação/heatmap_Significant_correlation_ASVvsInflamatMarkers.png", p,  width = 35, height = 20, dpi = 300)
View(cor_matrix)
View(cor_matrix)
# 2. Criar matriz de correlação apenas com ASVs significativas
cor_matrix <- cor_inflammatory %>%
filter(Feature.ID %in% asvs_signif) %>%
select(Feature.ID, variable, correlation) %>%
pivot_wider(names_from = variable, values_from = correlation) %>%
column_to_rownames("Feature.ID") %>%
as.matrix()
# 3. Criar matriz de asteriscos para significância (p_adj)
star_matrix <- cor_inflammatory %>%
filter(Feature.ID %in% asvs_signif) %>%
select(Feature.ID, variable, star) %>%
pivot_wider(names_from = variable, values_from = star) %>%
column_to_rownames("Feature.ID") %>%
as.matrix()
# 4. Paleta de cores e quebras
color_palette <- colorRampPalette(c("blue", "white", "red"))(100)
breaks <- seq(-0.5, 0.5, length.out = 101)
# 5. Gerar o heatmap com significância destacada
p <- pheatmap(cor_matrix,
display_numbers = star_matrix,
number_color = "white",  # cor dos asteriscos
clustering_method = "ward.D2",
clustering_distance_rows = "euclidean",
clustering_distance_cols = "euclidean",
color = color_palette,
breaks = breaks,
main = "Significant Correlations: ASVs vs Inflammatory Markers (n = 76) \n(FDR < 0.05)",
fontsize = 18,
fontsize_row = 18,
fontsize_col = 18,
fontsize_number = 26, # tamanho dos asteriscos
border_color = NA)
ggsave("C:/Users/polia/OneDrive/Desktop/EstatisticaR/AgrUrbana/16S_AgriUrbana/Planilhas_UrbanAgri/Para_Dissertação/heatmap_Significant_correlation_ASVvsInflamatMarkers.png", p,  width = 35, height = 20, dpi = 300)
save.image("C:/Users/polia/OneDrive/Desktop/EstatisticaR/AgrUrbana/16S_AgriUrbana/AgriculturaUrbana_Analises/Objetos_analises10.RData")
