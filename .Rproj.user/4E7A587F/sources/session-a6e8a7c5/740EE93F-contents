library(dplyr)
library(sf)
library(ggplot2)
library(basemaps)

set_defaults(map_service = "esri", map_type = "world_imagery")

#ext = basemaps::draw_ext()

#link para site do IBGE https://www.ibge.gov.br/geociencias/downloads-geociencias.html



data <- read.csv2("C:/Users/polia/OneDrive/Desktop/EstatisticaR/AgrUrbana/Manuel/dados_saude_geograficos - dados_saude_geograficos.csv")
sp_map <- sf::read_sf("C:/Users/polia/OneDrive/Desktop/EstatisticaR/AgrUrbana/Manuel/SP_Municipios/SP_Municipios_2022.shp")



# Faz o join baseado na coluna Sample.id
metadados.all.filtrado <- metadados.all.filtrado %>%
  left_join(data_spatial, by = "Sample.id")



sp_map %>%
  filter(NM_MUN %in% c("São Paulo",
                       "Embu-Guaçu",
                       "Diadema",
                       "Mogi das Cruzes", 
                       "Santo André",
                       "São Caetano do Sul",
                       "São Bernardo do Campo",
                       "Suzano",
                       "Embu das Artes",
                       "Itapecerica da Serra","Poá","Ferraz de Vasconcelos","Ribeirão Pires","Mauá","Rio Grande da Serra","São Lourenço da Serra")) -> map_extract

map_extract %>%
  ggplot() +
  geom_sf()

# Verificar se há valores ausentes nas coordenadas
sum(is.na(data$longitude))
sum(is.na(data$latitude))

# Remover linhas com valores ausentes nas coordenadas
data <- data %>%
  filter(!is.na(longitude) & !is.na(latitude))

# Verificar as primeiras linhas do dataframe limpo
colnames(data_spatial)


data_spatial <- sf::st_as_sf(data,coords = c("longitude","latitude"))
#####the next line is difficult
sf::st_crs(data_spatial) <- sf::st_crs(map_extract)

data_spatial %>%
  ggplot() +
  geom_sf() 

# Combinar latitude, longitude e geometry num dataframe só
dados_geo <- data %>%
  select(Sample.id, latitude, longitude) %>%
  left_join(
    data_spatial %>% st_drop_geometry() %>% select(Sample.id),  # só para manter Sample.id correto
    by = "Sample.id"
  ) %>%
  bind_cols(geometry = st_geometry(data_spatial))  # adiciona geometry

# Junta com metadados.all.filtrado
metadados.all.filtrado <- metadados.all.filtrado %>%
  left_join(dados_geo, by = "Sample.id") %>%
  st_as_sf()

#reading extracts
rivers_ext <- read_sf("C:/Users/polia/OneDrive/Desktop/EstatisticaR/AgrUrbana/Manuel/SP_Municipios/extrato_rios.shp")
bacias_ext <- read_sf("C:/Users/polia/OneDrive/Desktop/EstatisticaR/AgrUrbana/Manuel/SP_Municipios/extrato_bacias.shp")
veg_ext <- read_sf("C:/Users/polia/OneDrive/Desktop/EstatisticaR/AgrUrbana/Manuel/SP_Municipios/extrato_vegetacao.shp")

data_spatial$Type2 <- case_when(data_spatial$Type %in% c("Well_Surface","Well_Deep")~"Ground_Water",
                                data_spatial$Type %in% c("Lake","Spring","River")~"Surface_Water",
                                data_spatial$Type %in% c("Rainwater")~"Rainwater",
                                data_spatial$Type %in% c("Tap")~"Tap")


#no chat gpt
# Aplicar case_when para criar a nova coluna Region
data_spatial$Region <- case_when(
  data_spatial$Region %in% c("Sul", "Sul Adjacente", "Leste", "Leste Adjacente") ~ data_spatial$Region,
  TRUE ~ "Other"  # Caso queira marcar outras regiões que não se encaixam nas mencionadas
)



ggplot() +
  geom_sf(data = map_extract) +
  geom_sf(data = veg_ext, aes(fill = leg_sup), color = NA) +
  scale_fill_manual(
    values = c(
      "Área Antrópica Dominante" = "lightgray",
      "Área Antrópica Dominante em Tensão Ecológica" = "salmon",
      "Massa D´água" = "lightblue3",
      "Vegetação Natural Dominante" = "darkgreen",
      "Vegetação Natural Dominante em Tensão Ecológica" = "lightgreen"
    ),
    na.value = "white",
    name = "Vegetação"
  ) +
  geom_sf(data = rivers_ext, color = "lightblue3", linewidth = 1.2) +
  geom_sf(data = map_extract, fill = NA, linewidth = 1.2) +
  geom_sf(data = metadados.all.filtrado, aes(color = Region), size = 2) +
  scale_color_brewer(palette = "Set1", name = "Região") +
  theme_minimal()



ggplot() +
  geom_sf(data=map_extract)+
  #basemap_gglayer(ext=sf::st_bbox(data_spatial)) +
  geom_sf(data=veg_ext, aes(fill=leg_sup ), color=NA) +
  scale_fill_manual( values = c("Área Antrópica Dominante" = "lightgray",
                                  "Área Antrópica Dominante em Tensão Ecológica" = "salmon",
                                  "Massa D´água" = "lightblue3",
                                  "Vegetação Natural Dominante" = "darkgreen",
                                  "Vegetação Natural Dominante em Tensão Ecológica" = "lightgreen"),
                       na.value="white", name = "Vegetação") +
  geom_sf(data=rivers_ext, color="lightblue3",linewidth=1.2 ) +
 # geom_sf(data=bacias_ext, color="lightblue" , fill = "lightblue") +
  geom_sf(data=map_extract, fill=NA, linewidth=1.2)+
  geom_sf(data=data_spatial,aes(col=Region),
          #show.legend = "shape",
          size=4) +
  scale_shape_manual(values = c(18, 1, 17, 8), name = "AgrUrbana") +
  scale_color_continuous( low = "darkblue", high = "red",name = "Treponema") 

 
  #----Corrigido pelo gpt:

ggplot() +
  geom_sf(data=map_extract) +
  geom_sf(data=veg_ext, aes(fill=leg_sup), color=NA) +
  scale_fill_manual(values = c(
    "Área Antrópica Dominante" = "lightgray",
    "Área Antrópica Dominante em Tensão Ecológica" = "salmon",
    "Massa D´água" = "lightblue3",
    "Vegetação Natural Dominante" = "darkgreen",
    "Vegetação Natural Dominante em Tensão Ecológica" = "lightgreen"
  ), na.value="white", name = "Vegetação") +
  geom_sf(data=rivers_ext, color="lightblue3", linewidth=1.2) +
  geom_sf(data=map_extract, fill=NA, linewidth=1.2) +
  geom_sf(data=data_spatial, aes(color=Region), size=2, shape=21, fill="white", stroke=1.5) +
  scale_color_manual(values = c("Sul" = "blue", "Sul Adjacente" = "cyan", "Leste" = "green", "Leste Adjacente" = "yellow", "Other" = "grey"), name = "Região") +
  labs(title = "Presença de Treponema", color = "Região") +
  theme_minimal()


#---- Corrigido pelo Chat GPT para colocar presença e ausencia de Trponema

library(dplyr)
library(ggplot2)
library(sf)

# Criar nova coluna indicando presença ou ausência de Treponema
data_spatial <- data_spatial %>%
  mutate(Treponema_Presence = case_when(
    Treponema == 1 ~ "Presença",
    Treponema == 0 ~ "Ausência"
  ))

# Aplicar case_when para criar a nova coluna Region
data_spatial$Region <- case_when(
  data_spatial$Region %in% c("Sul", "Sul Adjacente", "Leste", "Leste Adjacente", "Norte") ~ data_spatial$Region,
  TRUE ~ "Norte"  # Caso queira marcar outras regiões que não se encaixam nas mencionadas
)

# Gerar o mapa com as novas informações
ggplot() +
  geom_sf(data=map_extract) +
  geom_sf(data=veg_ext, aes(fill=leg_sup), color=NA) +
  scale_fill_manual( values = c("URBANO" = "azure3",
                                "RURAL" = "darkseagreen"), name = "Tipo de Área") +
  geom_sf(data=rivers_ext, color="lightblue3", linewidth=1.2) +
  geom_sf(data=map_extract, fill=NA, linewidth=1.2) +
  geom_sf(data=data_spatial, aes(shape=Region, color=Treponema_Presence), size=2, stroke=1.5) +
  scale_shape_manual(values = c(
    "Sul" = 21, 
    "Sul Adjacente" = 22, 
    "Leste" = 23, 
    "Leste Adjacente" = 24, 
    "Norte" = 25,
    "Other" = 26
  ), name = "Região") +
  scale_color_manual(values = c("Presença" = "red", "Ausência" = "blue"), name = "Treponema") +
  labs(title = "Presença de Treponema", shape = "Região", color = "Treponema") +
  theme_minimal()

#----------------
#Área URBANA E RURAL

ggplot() +
  geom_sf(data=sector_extract, aes(shape = TIPO, color= TIPO), size=2)+ 
  scale_fill_manual( values = c("URBANO" = "azure3",
                                "RURAL" = "darkseagreen"), name = "Tipo de Área") +
  geom_sf(data=map_extract, fill=NA, linewidth=0.5) +
  geom_sf(data=rivers_ext, color="lightblue3",linewidth=1.2 ) +
  # geom_sf(data=bacias_ext, color="lightblue" , fill = "lightblue") +
  geom_sf(data=map_extract, fill=NA, linewidth=0.5)+
  geom_sf(data=data_spatial,aes(col=Treponema,
                                shape = Region),
          #show.legend = "shape",
          size=4) +
  scale_shape_manual(values = c(
    "Sul" = 21, 
    "Sul Adjacente" = 22, 
    "Leste" = 23, 
    "Leste Adjacente" = 24, 
    "Norte" = 25,
    "Other" = 26
  ), name = "Região") +
  scale_color_manual(values = c("Presença" = "red", "Ausência" = "blue"),name = "Treponema") +
  ggtitle("Presença de Treponema") +
  xlab("longitude") + ylab("latitude") +
  theme(plot.title = element_text(size=14, face="bold")) + 
  coord_sf(xlim=c(-46.65, -46.55), ylim=c(-23.75,-23.62))


#==================================#
#Ultimos mapa: 10/04/2025
#=================================#

library(ggplot2)
library(sf)
library(dplyr)

# Se ainda não tiver:
library(rnaturalearth)

install.packages("rnaturalearth")
install.packages("rnaturalearthdata")



ggplot() +
  geom_sf(data = map_extract) +
  geom_sf(data = veg_ext, aes(fill = leg_sup), color = NA) +
  scale_fill_manual(
    values = c(
      "Área Antrópica Dominante" = "lightgray",
      "Área Antrópica Dominante em Tensão Ecológica" = "salmon",
      "Massa D´água" = "lightblue3",
      "Vegetação Natural Dominante" = "darkgreen",
      "Vegetação Natural Dominante em Tensão Ecológica" = "lightgreen"
    ),
    labels = c(
      "Área Antrópica Dominante" = "Dominant Anthropized Area",
      "Área Antrópica Dominante em Tensão Ecológica" = "Anthropized Area Under Ecological Pressure",
      "Massa D´água" = "Water Body",
      "Vegetação Natural Dominante" = "Dominant Natural Vegetation",
      "Vegetação Natural Dominante em Tensão Ecológica" = "Natural Vegetation Under Ecological Pressure"
    ),
    na.value = "white",
    name = "Vegetation"
  ) +
  geom_sf(data = rivers_ext, color = "lightblue3", linewidth = 1.2) +
  geom_sf(data = map_extract, fill = NA, linewidth = 1.2) +
  geom_sf(data = metadados.all.filtrado, aes(color = Region), size = 2) +
  scale_color_manual(
    values = c(
      "Leste" = "#E41A1C",
      "Leste Adjacente" = "#377EB8",
      "Norte" = "#984EA3",
      "Sul" = "#FF7F00",
      "Sul Adjacente" = "#4DAF4A"
    ),
    name = "Region"
  ) +
  theme_minimal()

#melhor mapa:

library(ggplot2)
library(sf)
library(dplyr)

ggplot() +
  geom_sf(data = map_extract) +
  geom_sf(data = veg_ext, aes(fill = leg_sup), color = NA, show.legend = FALSE) +
  scale_fill_manual(
    values = c(
      "Área Antrópica Dominante" = "lightgray",
      "Área Antrópica Dominante em Tensão Ecológica" = "salmon",
      "Massa D´água" = "lightblue3",
      "Vegetação Natural Dominante" = "lightgreen",
      "Vegetação Natural Dominante em Tensão Ecológica" = "lightgray"
    ),
    labels = c(
      "Área Antrópica Dominante" = "Dominant Anthropized Area",
      "Área Antrópica Dominante em Tensão Ecológica" = "Anthropized Area Under Ecological Pressure",
      "Massa D´água" = "Water Body",
      "Vegetação Natural Dominante" = "Dominant Natural Vegetation",
      "Vegetação Natural Dominante em Tensão Ecológica" = "Natural Vegetation Under Ecological Pressure"
    ),
    na.value = "white"
  ) +
  geom_sf(data = rivers_ext, color = "lightblue3", linewidth = 1.2) +
  geom_sf(data = map_extract, fill = NA, linewidth = 1.2) +
  geom_sf(data = metadados.all.filtrado, aes(color = Region), size = 2) +
  scale_color_manual(
    values = c(
      "Leste" = "#E41A1C",
      "Leste Adjacente" = "darkgreen",
      "Norte" = "purple",
      "Sul" = "orange",
      "Sul Adjacente" = "blue"
    ),
    name = "Region"
  ) +
  theme_minimal()

ggsave("mapa_Region.png", 
       plot = last_plot(), 
       width = 10, height = 7, units = "in", 
       dpi = 300)


#=======#
 #BHEI
#=======

library(ggplot2)
library(sf)

library(ggplot2)
library(sf)

# Substitua esta linha:
geom_sf(data = veg_ext, aes(fill = leg_sup), color = NA, show.legend = FALSE) +
  
  # Por esta:
  # (a) Para remover completamente a camada de vegetação:
  # --> simplesmente exclua essa linha do código.
  
  # OU
  
  # (b) Para manter só o contorno da vegetação (sem cor de fundo):
  geom_sf(data = veg_ext, fill = NA, color = "gray80", linewidth = 0.2) +
  

ggplot() +
  geom_sf(data = map_extract) +
  geom_sf(data = veg_ext, fill = NA, color = "gray80", linewidth = 0.2) +
  geom_sf(data = rivers_ext, color = "lightblue3", linewidth = 1.2) +
  geom_sf(data = map_extract, fill = NA, linewidth = 1.2) +
  
  # Aqui colorimos pelos escores do BHEI
  geom_sf(data = metadados.all.filtrado, aes(color = BHEI_R_Score_Total), size = 2.5) +
  
  scale_color_gradient(
    low = "yellow", 
    high = "darkgreen",
    name = "BHEI Score"
  ) +
  
  theme_minimal()


#salvar:

ggsave("mapa_bhei_score.png", 
       plot = last_plot(), 
       width = 10, height = 7, units = "in", 
       dpi = 300)



